#!/bin/bash
U_54(){
	echo "===================================================";
	echo "[U-54] session timeout"
	flag="false";

	if [ $TMOUT -gt 600 ]; then
		echo "[WARN!!] >> current 'TMOUT' env is $TMOUT  (TMOUT has to be under 600)";
		flag="true";
	fi	

	if [ -f /etc/profile ]; then
		grep -vE '^#|^\s#' /etc/profile | grep -i 'TMOUT' | awk -F= '{gsub(" ", "", $0); print $2}' > tmpfile_u_54
		 while read -r line; do
			if [ -n "$line" ]; then
				if [ $line -gt 600 -o $line -eq 0 ]; then
					echo "[WARN!!] >> there is line 'TMOUT=$line' in /etc/profile";
					flag="true";
				fi
			fi
		done < ./tmpfile_u_54
		rm ./tmpfile_u_54
	else
		echo "[INFO] >> '/etc/profile' doesn't exist"
	fi

	if [ $flag = "false" ]; then
		echo "[SAFE] >> TMOUT env is under 600"
	fi

}


U_05(){
	echo "===================================================";
	flag="false";
	echo "[U-05] PATH environment variable"
	if [ `echo $PATH | grep -E '\.:|::|^:' | wc -l` -gt 0 ]; then
		echo  "[WARN!!] >> vulnerable, environment var 'PATH' has .:|::|^:";
		flag="true";
	fi

	file_array=("/etc/profile" "$HOME/.profile");
	for file in "${file_array[@]}"; do
		if [ `grep -E 'PATH=' $file | grep -E '\.:|::|^:' $file | wc -l` -gt 0 ]; then
			echo  "[WARN!!] >> vulnerable, $file has .:|::|^:";
			flag="true"
		fi
	done

	if [ $flag = "false" ]; then
		echo "[SAFE] >> current PATH variable and /etc/profile don't include .:|::^: ";
	fi
}

U_06(){
	echo "===================================================";
	echo "[U-06] file or directory owner\n";
	if [ `find / \( -nouser -o -nogroup \) -exec ls -al {} \; 2> /dev/null | tee /dev/tty | wc -l` -gt 0 ]; then
		echo "[WARN] >> There is file or directory whose owner doesn't exist";
	else 
		echo "[SAFE] >> safe";
	fi
}
U_07(){
	echo "===================================================";
	echo "[U-07] /etc/passwd -> owner,permission check";
	fileInfo=`ls -l /etc/passwd`;
	owner=`echo $fileInfo | awk '{print $3}'`;
	permission=`echo $fileInfo | awk '{print $1}'`;
#	echo $owner;
#	echo $permission;

	flag="false";

	if [ $owner != "root" ]; then
		echo "[WARN] >> /etc/passwd's owner is not root!!, $owner";
		flag="true";
	fi

	
	ur=${permission:1:1};
	uw=${permission:2:1};
	ux=${permission:3:1};

	gr=${permission:4:1};
	gw=${permission:5:1};
	gx=${permission:6:1};

	or=${permission:7:1};
	ow=${permission:8:1};
	ox=${permission:9:1};

	if [[ $ux != "-" ]] || [[ $gw != "-" ]] || [[ $gx != "-" ]] || [[ $ow != "-" ]] || [[ $ox != "-" ]]; then
		echo "[WARN!!] >> /etc/passwd's permission is improper, current permission is '$permission'";
		flag="true"
	fi

	if [ $flag = "false" ]; then
		echo "[SAFE]";
	fi
}

U_08(){
	echo "===================================================";
	echo "[U-08] /etc/shadow -> owner,permission check";
	fileInfo=`ls -l /etc/shadow`;
	owner=`echo $fileInfo | awk '{print $3}'`;
	permission=`echo $fileInfo | awk '{print $1}'`;
#	echo $owner;
#	echo $permission;

	flag="false";

	if [ $owner != "root" ]; then
		echo "[WARN!!] >> /etc/shadow's owner is not root!!, current owner is '$owner'";
		flag="true";
	fi

	
	ur=${permission:1:1};
	uw=${permission:2:1};
	ux=${permission:3:1};

	gr=${permission:4:1};
	gw=${permission:5:1};
	gx=${permission:6:1};

	or=${permission:7:1};
	ow=${permission:8:1};
	ox=${permission:9:1};

	if [[ $uw != "-" ]] || [[ $ux != "-" ]] || [[ $gr != "-" ]] || [[ $gw != "-" ]] || [[ $gx != "-" ]] || [[ $or != "-" ]] || [[ $ow != "-" ]] || [[ $ox != "-" ]]; then
		echo "[WARN!!] >> /etc/shadow's permission is improper, current permission is '$permission'";
		flag="true"
	fi

	if [ $flag = "false" ]; then
		echo "[SAFE]";
	fi
}

U_09(){
	echo "===================================================";
	echo "[U-09] /etc/hosts -> owner,permission check";
	fileInfo=`ls -l /etc/hosts`;
	owner=`echo $fileInfo | awk '{print $3}'`;
	permission=`echo $fileInfo | awk '{print $1}'`;
#	echo $owner;
#	echo $permission;

	flag="false";

	if [ $owner != "root" ]; then
		echo "[WARN!!] >> /etc/hosts's owner is not root!!, current owner is '$owner'";
		flag="true";
	fi

	
	ur=${permission:1:1};
	uw=${permission:2:1};
	ux=${permission:3:1};

	gr=${permission:4:1};
	gw=${permission:5:1};
	gx=${permission:6:1};

	or=${permission:7:1};
	ow=${permission:8:1};
	ox=${permission:9:1};

	if [[ $ux != "-" ]] || [[ $gr != "-" ]] || [[ $gw != "-" ]] || [[ $gx != "-" ]] || [[ $or != "-" ]] || [[ $ow != "-" ]] || [[ $ox != "-" ]]; then
		echo "[WARN!!] >> /etc/hosts's permission is improper, current permission is '$permission'";
		flag="true"
	fi

	if [ $flag = "false" ]; then
		echo "[SAFE]";
	fi
}


U_10(){
	echo "===================================================";
	echo "[U-10] /etc/xinetd.conf, /etc/xinetd.d/* -> owner,permission check";

	file_array=();
	touch tmpfile;
	ls /etc/xinetd.d/* > tmpfile;
	while read -r file; do
		file_array+=($file);
	done < ./tmpfile

#	for file in "${file_array[@]}";
#	do
#		echo $file;
#	done

	file_array+=("/etc/xinetd.conf");
	file_array+=("/etc/inetd.conf");

	flag="false";
	
	for file in "${file_array[@]}"; do
		if [ -f $file ]; then
			fileInfo=`ls -l $file`;
			owner=`echo $fileInfo | awk '{print $3}'`;
			permission=`echo $fileInfo | awk '{print $1}'`;
		#	echo $owner;
		#	echo $permission;

			flag="false";

			if [ $owner != "root" ]; then
				echo "[WARN!!] >> $file's owner is not root!!, current owner is '$owner'";
				flag="true";
			fi

			
			ur=${permission:1:1};
			uw=${permission:2:1};
			ux=${permission:3:1};

			gr=${permission:4:1};
			gw=${permission:5:1};
			gx=${permission:6:1};

			or=${permission:7:1};
			ow=${permission:8:1};
			ox=${permission:9:1};

			if [[ $ux != "-" ]] || [[ $gr != "-" ]] || [[ $gw != "-" ]] || [[ $gx != "-" ]] || [[ $or != "-" ]] || [[ $ow != "-" ]] || [[ $ox != "-" ]]; then
				echo "[WARN!!] >> $file's permission is improper, current permission is $permission";
				flag="true"
			fi

		fi
	done

	rm ./tmpfile;

	if [ $flag = "false" ]; then
		echo "[SAFE]";
	fi
}


U_11(){
	echo "===================================================";
	#path ambiguous
	echo "[U-11] /etc/(r)syslog.conf -> owner,permission check";

	if [ -f /etc/syslog.conf ]; then
		echo "[INFO] >> /etc/syslog.conf exists";
		fileInfo=`ls -l /etc/syslog.conf`;
		owner=`echo $fileInfo | awk '{print $3}'`;
		permission=`echo $fileInfo | awk '{print $1}'`;
	#	echo $owner;
	#	echo $permission;

		flag="false";

		if [[ $owner != "root" ]] && [[ $owner != "bin" ]] && [[ $owner != "sys" ]]; then
			echo "[WARN!!] >> /etc/syslog.conf's owner is not root|bin|sys!!, current owner is '$owner'";
			flag="true";
		fi

		
		ur=${permission:1:1};
		uw=${permission:2:1};
		ux=${permission:3:1};

		gr=${permission:4:1};
		gw=${permission:5:1};
		gx=${permission:6:1};

		or=${permission:7:1};
		ow=${permission:8:1};
		ox=${permission:9:1};

		if [[ $ux != "-" ]] || [[ $gw != "-" ]] || [[ $gx != "-" ]] || [[ $or != "-" ]] || [[ $ow != "-" ]] || [[ $ox != "-" ]]; then
			echo "[WARN!!] >> /etc/syslog.conf's permission is improper, current permission is '$permission'";
			flag="true"
		fi

		if [ $flag = "false" ]; then
			echo "[SAFE] >> /etc/syslog.conf is safe";
		fi
	else
		echo "[INFO] >> /etc/syslog.conf doesn't exist";
	fi

	if [ -f /etc/rsyslog.conf ]; then
		echo "[INFO] >> /etc/rsyslog.conf exists";
		fileInfo=`ls -l /etc/rsyslog.conf`;
		owner=`echo $fileInfo | awk '{print $3}'`;
		permission=`echo $fileInfo | awk '{print $1}'`;
	#	echo $owner;
	#	echo $permission;

		flag="false";

		if [[ $owner != "root" ]] && [[ $owner != "bin" ]] && [[ $owner != "sys" ]]; then
			echo "[WARN!!] >> /etc/rsyslog.conf's owner is not root|bin|sys!!, current owner is '$owner'";
			flag="true";
		fi

		
		ur=${permission:1:1};
		uw=${permission:2:1};
		ux=${permission:3:1};

		gr=${permission:4:1};
		gw=${permission:5:1};
		gx=${permission:6:1};

		or=${permission:7:1};
		ow=${permission:8:1};
		ox=${permission:9:1};

		if [[ $ux != "-" ]] || [[ $gw != "-" ]] || [[ $gx != "-" ]] || [[ $or != "-" ]] || [[ $ow != "-" ]] || [[ $ox != "-" ]]; then
			echo "[WARN!!] >> /etc/rsyslog.conf's permission is improper, current permission is '$permission'";
			flag="true"
		fi

		if [ $flag = "false" ]; then
			echo "[SAFE] >> /etc/rsyslog.conf is safe";
		fi
	else
		echo "[INFO] >> /etc/rsyslog.conf doesn't exist";
	fi

}


U_12(){
	echo "===================================================";
	echo "[U-12] /etc/services -> owner,permission check";

	if [ -f /etc/services ]; then
		fileInfo=`ls -l /etc/services`;
		owner=`echo $fileInfo | awk '{print $3}'`;
		permission=`echo $fileInfo | awk '{print $1}'`;
#		echo $owner;
#		echo $permission;

		flag="false";

		if [[ $owner != "root" ]] && [[ $owner != "bin" ]] && [[ $owner != "sys" ]]; then
			echo "[WARN!!] >> /etc/services's owner is not root|bin|sys!!, current owner is '$owner'";
			flag="true";
		fi

		
		ur=${permission:1:1};
		uw=${permission:2:1};
		ux=${permission:3:1};

		gr=${permission:4:1};
		gw=${permission:5:1};
		gx=${permission:6:1};

		or=${permission:7:1};
		ow=${permission:8:1};
		ox=${permission:9:1};

		if [[ $ux != "-" ]] || [[ $gw != "-" ]] || [[ $gx != "-" ]] || [[ $ow != "-" ]] || [[ $ox != "-" ]]; then
			echo "[WARN!!] >> /etc/services's permission is improper, current permission is '$permission'";
			flag="true"
		fi

		if [ $flag = "false" ]; then
			echo "[SAFE]";
		fi
	fi
}

U_14(){
	echo "===================================================";
	echo "[U-14] user, system init&setting file's owner and permission setting";
	flag="false";
	if [ -d /home ]; then
		ls /home > tmpfile_u_14_1;
		while read -r homedir; do

			path="/home/$homedir/";	
			#echo $path;
			ls -al $path > tmpfile_u_14_2;
			while read -r line; do

				filename=`echo $line | awk '{print $9}'`;
				owner=`echo $line | awk '{print $3}'`;
				permission=`echo $line | awk '{print $1}'`;

				if [[ $filename = ".profile" ]] || [[ $filename = ".kshrc" ]] || [[ $filename = ".cshrc" ]] || [[ $filename = ".bashrc" ]] || [[ $filename = ".bash_profile" ]] || [[ $filename = ".login" ]] || [[ $filename = ".exrc" ]] || [[ $filename = ".netrc" ]];then 
					
					ow=${permission:8:1};

					if [[ $ow = "w" ]] || [[ $owner != $homedir ]] && [[ $owner != 'root' ]]; then
						echo "[WARN!!] >> /home/$homedir/$filename is vulnerable, other write permission is '$ow', file owner is '$owner'";
						flag="true";
					fi

				fi
			done < ./tmpfile_u_14_2;
		done < ./tmpfile_u_14_1
		rm ./tmpfile_u_14_1 ./tmpfile_u_14_2;
	fi

	if [ $flag = "false" ]; then
		echo "[SAFE]";
	fi
}

U_15(){
	echo "===================================================";
	echo "[U-15] world writable file test";
	if [ `sudo find / -type f -perm -2 2> /dev/null | tee tmpfile_u_15 | wc -l` -gt 0 ]; then
		echo "[WARN!!] >> world writable file exists.";
		cat ./tmpfile_u_15
		rm ./tmpfile_u_15;
	else
		echo "[SAFE]";
	fi

}

U_16(){
	echo "===================================================";
	echo "[U-16] device file which doesn't exist in /dev";
	if [ `find /dev -type f 2>/dev/null | tee tmpfile_u_16 | wc -l` -gt 0 ]; then
		echo "[WARN!!] >> there is suspicious file in /dev";
		cat ./tmpfile_u_16;
		rm ./tmpfile_u_16;
	else
		echo "[SAFE] >> there is no suspicious file in /dev";
	fi
}

U_17(){
	echo "===================================================";
	echo "[U-17] check r command service -> \$HOME/.rhosts, hosts.equiv";

	echo "check if rsh,rlogin,rexec have been installed.."
	if [ -f /usr/sbin/in.rshd ]; then
		echo "[INFO] >> rsh : installed!";
	else
		echo "[INFO] >> rsh : uninstalled!";
	fi

	if [ -f /usr/sbin/in.rlogind ]; then
		echo "[INFO] >> rlogin : installed!";
	else
		echo "[INFO] >> rlogin : uninstalled!";
	fi

	if [ -f /usr/sbin/in.rexecd ]; then
		echo "[INFO] >> rexec : installed!";
	else
		echo "[INFO] >> rexec : uninstalled!";
	fi

	echo "";

	
	echo "check if rsh,rlogin,rexec are active or not.."
	if [ `netstat -tuln | grep 512 | wc -l` -gt 0 ]; then 
		echo "[WARN!!] >> rexec : Active"; 
	else
		echo "[SAFE] >> rexec : Inactive"; 
	fi

	if [ `netstat -tuln | grep 513 | wc -l` -gt 0 ]; then 
		echo "[WARN!!] >> rlogin : Active"; 
	else
		echo "[SAFE] >> rlogin : Inactive"; 
	fi

	if [ `netstat -tuln | grep 514 | wc -l` -gt 0 ]; then 
		echo "[WARN!!] >> rsh : Active"; 
	else
		echo "[SAFE] >> rlogin : Inactive"; 
	fi

	echo "";

	echo "check if /etc/hosts.equiv is safe or not.."; 
	flag="false";
	if [ -f /etc/hosts.equiv ]; then
		line=`ls -al /etc/hosts.equiv`;
		owner=`echo $line | awk '{print $3}'`;
		permission=`echo $line | awk '{print $1}'`;
		ur=${permission:1:1};
		uw=${permission:2:1};
		ux=${permission:3:1};

		gr=${permission:4:1};
		gw=${permission:5:1};
		gx=${permission:6:1};

		or=${permission:7:1};
		ow=${permission:8:1};
		ox=${permission:9:1};
		if [ $owner != "root" ]; then
			echo "[WARN!!] >> /etc/hosts.equiv's owner is not root!";
			flag="true";
		fi

		if [[ $ux = "x" ]] || [[ $gr = "r" ]] || [[ $gw = "w" ]] || [[ $gx = "x" ]] || [[ $or = "r" ]] || [[ $ow = "w" ]] || [[ $ox = "x" ]]; then
			echo "[WARN!!] >> /etc/hosts.equiv's permission is $permission now(you have to set permission less than 600)";
			flag="true";
		fi
		sudo cat /etc/hosts.equiv > ./tmpfile_u_17_4;
		while read -r line; do
			if [ $(echo $line | grep -E '^#|^\s#' | wc -l) -gt 0 ]; then
				continue;
			fi

			if [[ $line =~ '+' ]]; then
				echo "[WARN!!] >> there is vulnerable setting in /etc/hosts.equiv -> '$line'";
				flag="true";
			fi
		done < ./tmpfile_u_17_4;
		rm ./tmpfile_u_17_4;


		if [ $flag = "false" ]; then
			echo "[SAFE] >> /etc/hosts.equiv is safe";
		fi

	else
		echo "[INFO] >> /etc/hosts.equiv doesn't exist";
	fi

	echo "";

	echo "check if \$HOME/.rhosts is safe or not..";
	if [ -d /home ]; then
		ls /home > tmpfile_u_17_1;
		while read -r homedir; do
			if [ -f /home/$homedir/.rhosts ]; then
				ls -al /home/$homedir/.rhosts > tmpfile_u_17_2
				while read -r line; do
					filename=`echo $line | awk '{print $9}'`;
					if [[ "$filename" =~ ".rhosts" ]]; then
						flag="false";

						echo "[INFO] >> /home/$homedir/.rhosts exists!";
						owner=`echo $line | awk '{print $3}'`;
						permission=`echo $line | awk '{print $1}'`;
						ur=${permission:1:1};
						uw=${permission:2:1};
						ux=${permission:3:1};

						gr=${permission:4:1};
						gw=${permission:5:1};
						gx=${permission:6:1};

						or=${permission:7:1};
						ow=${permission:8:1};
						ox=${permission:9:1};

						if [[ $owner != $homedir ]] && [[ $owner != "root" ]]; then
							echo "[WARN!!] >> /home/$homedir/.rhosts's owner is '$owner' (you have to change this to '$homedir' or 'root')";
							flag="true";
						fi

						if [[ $ux = "x" ]] || [[ $gr = "r" ]] || [[ $gw = "w" ]] || [[ $gx = "x" ]] || [[ $or = "r" ]] || [[ $ow = "w" ]] || [[ $ox = "x" ]]; then
							echo "[WARN!!] >> /home/$homedir/.rhosts's permission is $permission (you have to change permission less than 600)";
							flag="true";
						fi

						
						sudo cat /home/$homedir/.rhosts > ./tmpfile_u_17_3;
						while read -r line2; do
							if [ $(echo $line2 | grep -E '^#|^\s#' | wc -l) -gt 0 ]; then
								continue;
							fi

							if [[ $line2 =~ '+' ]]; then
								echo "[WARN!!] >> there is vulnerable setting in /home/$homedir/.rhosts! -> '$line2'";
								flag="true";
							fi
						done < ./tmpfile_u_17_3;
						if [ $flag = "false" ]; then
							echo "[SAFE] >> /home/$homedir/.rhosts is safe";
						fi
					fi
				done < ./tmpfile_u_17_2

				echo "";
			fi
		done < ./tmpfile_u_17_1
	fi
	rm ./tmpfile_u_17_1 ./tmpfile_u_17_2 ./tmpfile_u_17_3;

	
}


D_05(){
	echo "===================================================";
	echo "[D-05] check if there is account which can be accessed by '%' ";
	flag='false';

	if sudo mysql -u'root' -p'\n' mysql -e'select user,host from mysql.user;' > tmpfile_d_05 2> /dev/null; then
		while read -r line; do
		user=`echo $line | awk '{print $1}'`;
		host=`echo $line | awk '{print $2}'`;
		if [[ $host = '%' ]]; then
			echo "[WARN!!] >> user='$user' host='$host' in mysql.user table, please restrict host(ip) who can access '$user'";	
			flag='true';

		fi
		done < ./tmpfile_d_05;
		rm ./tmpfile_d_05;
	else
		echo ">> fail access to dbms";
	fi


	if sudo mysql -u'root' -p'\n' mysql -e'select user,host from mysql.db;' > tmpfile_d_05 2> /dev/null; then
		while read -r line; do
		user=`echo $line | awk '{print $1}'`;
		host=`echo $line | awk '{print $2}'`;
		if [[ $host = '%' ]]; then
			echo "[WARN!!] >> user='$user' host='$host' in mysql.db table, please restrict host(ip) who can access '$user'";	
			flag='true';

		fi
		done < ./tmpfile_d_05;
		rm ./tmpfile_d_05;


	else
		echo ">> fail access to dbms";
	fi

	
	if [ $flag = 'false' ]; then
		echo "[SAFE]";
	fi
}


D_03(){
	echo "===================================================";
	echo "[D-03] DBMS password policy check";

	flag="false";

	#your password policy
	check_user_name="OFF";
	length=8;
	mixed_case_count=1;
	number_count=1;
	special_char_count=1;
	policy="MEDIUM";   #LOW,MEDIUM,STRONG
	dictionary_file="/etc/dictionary_mysql";

	default_password_lifetime=90;
	
	sudo mysql -u'root' -p'\n' -e 'show variables like "default_password%";' > tmpfile_d_03 2> /dev/null;
	while read -r line; do
		first_field=`echo $line | awk '{print $1}'`;
		second_field=`echo $line | awk '{print $2}'`;
		if [ $first_field = "default_password_lifetime" ]; then
			if [[ $second_field -gt $default_password_lifetime ]] || [[ $second_field -eq 0 ]]; then
				echo "[WARN!!] >> you expected '$default_password_lifetime', but default_password_lifetime in mysql is '$second_field' now";
				flag="true";
			fi
		fi
	done < ./tmpfile_d_03;

	sudo mysql -u'root' -p'\n' -e 'show variables like "validate_password%";' > tmpfile_d_03 2> /dev/null;
	while read -r line; do
		first_field=`echo $line | awk '{print $1}'`;
		second_field=`echo $line | awk '{print $2}'`;

		if [ $first_field = "validate_password_check_user_name" ]; then
			if [ $second_field != $check_user_name ]; then
				echo "[WARN!!] >> you expected '$check_user_name', but validate_password_check_user_name in mysql is '$second_field' now";
				flag="true";
			fi
		elif [ $first_field = "validate_password_length" ]; then	
			if [ $second_field -lt $length ]; then
				echo "[WARN!!] >> you expected '$length', but validate_password_length in mysql is '$second_field' now";
				flag="true";
			fi
		elif [ $first_field = "validate_password_mixed_case_count" ]; then	
			if [ $second_field -lt $mixed_case_count ]; then
				echo "[WARN!!] >> you expected '$mixed_case_count', but validate_password_mixed_case_count in mysql is '$second_field' now";
				flag="true";
			fi
		elif [ $first_field = "validate_password_number_count" ]; then	
			if [ $second_field -lt $number_count ]; then
				echo "[WARN!!] >> you expected '$number_count', but validate_password_number_count in mysql is '$second_field' now";
				flag="true";
			fi
		elif [ $first_field = "validate_password_policy" ]; then	
			if [ $second_field != $policy ]; then
				echo "[WARN!!] >> you expected '$policy', but validate_password_policy in mysql is '$second_field' now";
				flag="true";
			fi
		elif [ $first_field = "validate_password_special_char_count" ]; then	
			if [ $second_field -lt $special_char_count ]; then
				echo "[WARN!!] >> you expected '$special_char_count', but validate_password_special_char_count in mysql is '$second_field' now";
				flag="true";
			fi
		elif [ $first_field = "validate_password_dictionary_file" ]; then
			if [ $second_field ]; then
				if [ $second_field != $dictionary_file ]; then
				echo "[WARN!!] >> you expected '$dictionary_file', but validate_password_dictionary_file in mysql is '$second_field' now";
				flag="true";
				fi
			else
				echo "[INFO] >> validate_password_dictionary_file's value in mysql is empty";
			fi
		fi
	done <./tmpfile_d_03;

	rm ./tmpfile_d_03;


	if [ $flag = "false" ]; then
		echo "[SAFE] >> password policy in mysql is safe";
	fi
}


U_54
U_05
U_06
U_07
U_08
U_09
U_10
U_11
U_12
U_14
#U_15
U_16
U_17
#D_05 --> X
D_03
