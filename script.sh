#!/bin/bash
U_54(){
	echo "===================================================";
	echo "[U-54] Session Timeout 설정";
	flag="false";

	#현재 TMOUT 변수값 체크
	echo "현재 TMOUT 환경변수값 체크";
	if [ $TMOUT -gt 600 ]; then
		echo "[WARN!!] >> 현재 환경변수 TMOUT=$TMOUT (600이하여야한다.)";
		flag="true";
	fi	

	echo "";

	#/etc/profile 체크
	if [ -f /etc/profile ]; then
		egrep -vE '^#|^\s#' /etc/profile | grep -i 'TMOUT' | awk -F= '{gsub(" ", "", $0); print $2}' > tmpfile_u_54
		echo "[INFO] >> /etc/profile 존재";
		 while read -r line; do
			if [ -n "$line" ]; then

				#TMOUT이 600이이상이거나 0이면 취약
				if [ $line -gt 600 -o $line -eq 0 ]; then
					echo "[WARN!!] >> 'TMOUT=$line'";
					flag="true";
				fi
			fi
		done < ./tmpfile_u_54
		rm ./tmpfile_u_54
	else
		echo "[INFO] >> '/etc/profile' 없음"
	fi
	
	echo "";

	#/etc/.profile 체크
	if [ -f /etc/.profile ]; then
		egrep -vE '^#|^\s#' /etc/.profile | grep -i 'TMOUT' | awk -F= '{gsub(" ", "", $0); print $2}' > tmpfile_u_54
		echo "[INFO] >> /etc/.profile 존재";
		 while read -r line; do
			if [ -n "$line" ]; then

				#TMOUT이 600이이상이거나 0이면 취약
				if [ $line -gt 600 -o $line -eq 0 ]; then
					echo "[WARN!!] >> 'TMOUT=$line'";

					flag="true";
				fi
			fi
		done < ./tmpfile_u_54
		rm ./tmpfile_u_54
	else
		echo "[INFO] >> '/etc/.profile' 없음"
	fi

	if [ $flag = "false" ]; then
		echo "[SAFE] >> TMOUT환경변수가 600이하고 설정파일도 안전합니다."
	fi
}


U_05(){
	echo "===================================================";
	echo "[U-05] root홈, 패스 디렉터리 권한 및 패스 설정"

	flag="false";

	#현재 PATH환경변수 체크
	if [ `echo $PATH | egrep -E '\.|::|^:' | wc -l` -gt 0 ]; then
		echo "[WARN!!] >> PATH환경변수가'.|::|^:를 포함하고 있습니다.";
		echo $PATH;
		flag="true";
	else
		echo "[SAFE] >> PATH 환경변수는 안전합니다.";
	fi
	echo "";
	
	#/etc/profile 설정파일 체크
	if [ -f /etc/profile ]; then
		echo "[INFO] >> /etc/profile 존재!";
		if [ `cat /etc/profile | egrep -vE '^#|^\s#' | grep -E '^[\s]*PATH=' | egrep -E '\.|::|^:' | wc -l` -gt 0 ]; then
			echo "[WARN!!] >> /etc/profile이 위험합니다.'";
			echo `cat /etc/profile | egrep -vE '^#|^\s#' | grep -E '^[\s]*PATH=' | egrep -E '\.|::|^:'`;
			flag="true"
		else
			echo "[SAFE] >> /etc/profile은 안전합니다.";
		fi
		echo "";
	fi

	#/etc/.login 설정파일 체크
	if [ -f /etc/.login ]; then
		echo "[INFO] >> /etc/.login 존재!";
		if [ `cat /etc/.login | egrep -vE '^#|^\s#' | grep -E '^[\s]*PATH=' | egrep -E '\.|::|^:' | wc -l` -gt 0 ]; then
			echo  "[WARN!!] >> /etc/.login이 위험합니다.";
			echo `cat /etc/.login | egrep -vE '^#|^\s#' | grep -E '^[\s]*PATH=' | egrep -E '\.|::|^:'`; 
			flag="true"
		else
			echo "[SAFE] >> /etc/.login은 안전합니다.";
		fi
		echo "";
	fi

	#각 홈디렉터리에 있는 설정파일 체크
	HOMEDIR_LIST=`ls /home`;
	HOME_SETTINGFILE_LIST=(".profile" ".cshrc" ".login" "kshrc" ".bash_profile");
	for HOMEDIR in ${HOMEDIR_LIST[@]};do
		for HOME_SETTINGFILE in ${HOME_SETTINGFILE_LIST[@]};do
			FILE="/home/$HOMEDIR/$HOME_SETTINGFILE";
			if [ -f $FILE ]; then
				echo "[INFO] >> $FILE 존재!";
				if [ `cat $FILE | egrep -vE '^#|^\s#' | grep -E '^[\s]*PATH=' | egrep -E '\.|::|^:' | wc -l` -gt 0 ]; then
					echo  "[WARN!!] >> $FILE이 위험합니다.";
					echo `cat $FILE | egrep -vE '^#|^\s#' | grep -E '^[\s]*PATH=' | egrep -E '\.|::|^:'`; 
					flag="true"
				else
					echo "[SAFE] >> $FILE은 안전합니다.";
				fi
				echo "";
			fi
		done
	done	



	if [ $flag = "false" ]; then
		echo "[SAFE] >> [U-05] 항목에 대해서  진단한  결과 안전합니다. ";
	fi
}

U_06(){
	echo "===================================================";
	echo -e "[U-06] 파일 및 디렉터리 소유자 설정\n";
	if [ `find / \( -nouser -o -nogroup \) -exec ls -al {} \; 2> /dev/null | tee ./tmpfile_u_06 | wc -l` -gt 0 ]; then
		echo "[WARN!!] >> 소유자가 불분명한 파일이나 디렉터리가 존재합니다.";
		while read -r line;do
			echo $line;
		done < ./tmpfile_u_06;
		rm ./tmpfile_u_06;
	else 
		echo "[SAFE] >> safe";
	fi
}
U_07(){
	echo "===================================================";
	echo "[U-07] /etc/passwd파일 소유자 및 권한 설정";
	fileInfo=`ls -l /etc/passwd`;
	owner=`echo $fileInfo | awk '{print $3}'`;
	permission=`echo $fileInfo | awk '{print $1}'`;
	flag="false";

	#/etc/passwd의 소유자가 root인지 체크
	if [ $owner != "root" ]; then
		echo "[WARN] >> /etc/passwd의 소유자가 root가 아닙니다, 현재 소유자 : '$owner'";
		flag="true";
	fi

	
	ur=${permission:1:1};
	uw=${permission:2:1};
	ux=${permission:3:1};

	gr=${permission:4:1};
	gw=${permission:5:1};
	gx=${permission:6:1};

	or=${permission:7:1};
	ow=${permission:8:1};
	ox=${permission:9:1};

	#/etc/passwd의 권한이 644이하인지 확인
	if [[ $ux != "-" ]] || [[ $gw != "-" ]] || [[ $gx != "-" ]] || [[ $ow != "-" ]] || [[ $ox != "-" ]]; then
		echo "[WARN!!] >> /etc/passwd의 권한이 644이하가 아닙니다, 현재 권한은 '$permission'";
		flag="true"
	fi

	if [ $flag = "false" ]; then
		echo "[SAFE] >> /etc/passwd는 안전합니다.";
		echo `ls  -l /etc/passwd`;
	fi
}

U_08(){
	echo "===================================================";
	echo "[U-08] /etc/shadow 파일 소유자 및 권한 설정";
	fileInfo=`ls -l /etc/shadow`;
	owner=`echo $fileInfo | awk '{print $3}'`;
	permission=`echo $fileInfo | awk '{print $1}'`;
	flag="false";

	#/etc/shadow의 소유자가 root인지 체크
	if [ $owner != "root" ]; then
		echo "[WARN!!] >> /etc/shadow의 소유자가 root가 아닙니다, 현재 소유자 : '$owner'";
		flag="true";
	fi

	
	ur=${permission:1:1};
	uw=${permission:2:1};
	ux=${permission:3:1};

	gr=${permission:4:1};
	gw=${permission:5:1};
	gx=${permission:6:1};

	or=${permission:7:1};
	ow=${permission:8:1};
	ox=${permission:9:1};

	#/etc/shadow의 권한이 400이하인지 체크
	if [[ $uw != "-" ]] || [[ $ux != "-" ]] || [[ $gr != "-" ]] || [[ $gw != "-" ]] || [[ $gx != "-" ]] || [[ $or != "-" ]] || [[ $ow != "-" ]] || [[ $ox != "-" ]]; then
		echo "[WARN!!] >> /etc/shadow의 권한이 400이하가 아닙니다, 현재 권한 :  '$permission'";
		flag="true"
	fi

	if [ $flag = "false" ]; then
		echo "[SAFE] >> /etc/shadow는 안전합니다.";
		echo `ls  -l /etc/shadow`;
	fi
}

U_09(){
	echo "===================================================";
	echo "[U-09] /etc/hosts 파일 소유자 및 권한 설정";
	fileInfo=`ls -l /etc/hosts`;
	owner=`echo $fileInfo | awk '{print $3}'`;
	permission=`echo $fileInfo | awk '{print $1}'`;
	flag="false";

	#/etc/hosts의 소유자가 root인지 체크
	if [ $owner != "root" ]; then
		echo "[WARN!!] >> /etc/hosts의 소유자가 root가 아닙니다, 현재 소유자 : '$owner'";
		flag="true";
	fi

	
	ur=${permission:1:1};
	uw=${permission:2:1};
	ux=${permission:3:1};

	gr=${permission:4:1};
	gw=${permission:5:1};
	gx=${permission:6:1};

	or=${permission:7:1};
	ow=${permission:8:1};
	ox=${permission:9:1};

	#/etc/hosts의 권한이 600이하인지 체크
	if [[ $ux != "-" ]] || [[ $gr != "-" ]] || [[ $gw != "-" ]] || [[ $gx != "-" ]] || [[ $or != "-" ]] || [[ $ow != "-" ]] || [[ $ox != "-" ]]; then
		echo "[WARN!!] >> /etc/hosts의 권한이 600이하가 아닙니다, 현재 권한 : '$permission'";
		flag="true"
	fi

	if [ $flag = "false" ]; then
		echo "[SAFE] >> /etc/hosts는 안전합니다.";
		echo `ls  -l /etc/hosts`;
	fi
}


U_10(){
	echo "===================================================";
	echo "[U-10] /etc/(x)inetd.conf 파일 소유자 및 권한 설정";
	flag="false";

	#검사할 파일들을 배열에 추가한다.
	file_array=();

	if [ -d /etc/xinetd.d ]; then
		ls /etc/xinetd.d/* > tmpfile_u_10;
		while read -r file; do
			file_array+=($file);
		done < ./tmpfile_u_10
		rm ./tmpfile_u_10
	else
		echo "[INFO] >> /etc/xinetd.d 디렉터리가 존재하지 않습니다.";
	fi

	file_array+=("/etc/xinetd.conf");
	file_array+=("/etc/inetd.conf");

	
	#각 파일에 대해서 소유자와 권한을 체크
	for file in "${file_array[@]}"; do
		if [ -f $file ]; then
			fileInfo=`ls -l $file`;
			owner=`echo $fileInfo | awk '{print $3}'`;
			permission=`echo $fileInfo | awk '{print $1}'`;

			if [ $owner != "root" ]; then
				echo "[WARN!!] >> $file의 소유자가 root가 아닙니다, 현재 소유자 : '$owner'";
				flag="true";
			fi

			
			ur=${permission:1:1};
			uw=${permission:2:1};
			ux=${permission:3:1};

			gr=${permission:4:1};
			gw=${permission:5:1};
			gx=${permission:6:1};

			or=${permission:7:1};
			ow=${permission:8:1};
			ox=${permission:9:1};

			if [[ $ux != "-" ]] || [[ $gr != "-" ]] || [[ $gw != "-" ]] || [[ $gx != "-" ]] || [[ $or != "-" ]] || [[ $ow != "-" ]] || [[ $ox != "-" ]]; then
				echo "[WARN!!] >> $file의 권한이 600이하가 아닙니다, 현재 권한 : $permission";
				flag="true"
			fi
		fi
	done

	#안전하다면
	if [ $flag = "false" ]; then
		echo "[SAFE] >> /etc/(x)inetd.conf 및/etc/xinetd.d/하위 파일들은 안전합니다.";
		if [ -f /etc/inetd.conf ];then
			echo `ls -l /etc/inetd.conf`;
		fi

		if [ -f /etc/xinetd.conf ];then
			echo `ls -l /etc/xinetd.conf`;
		fi

		if [ -d /etc/xinetd.d ];then
			list=`ls /etc/xinetd.d`;
			for file in ${list[@]};do
				echo `ls -l /etc/xinetd.d/$file`;
			done
		fi

	fi
}


U_11(){
	echo "===================================================";
	echo "[U-11] /etc/(r)syslog.conf 파일 소유자 및 권한 설정";

	#/etc/syslog.conf의 소유자와 권한 체크
	if [ -f /etc/syslog.conf ]; then
		echo "[INFO] >> /etc/syslog.conf 존재";
		fileInfo=`ls -l /etc/syslog.conf`;
		owner=`echo $fileInfo | awk '{print $3}'`;
		permission=`echo $fileInfo | awk '{print $1}'`;
		flag="false";

		#/etc/syslog.conf의 소유자 체크
		if [[ $owner != "root" ]] && [[ $owner != "bin" ]] && [[ $owner != "sys" ]]; then
			echo "[WARN!!] >> /etc/syslog.conf의 소유자가  root,bin,sys중 하나가 아닙니다, 현재 소유자 : '$owner'";
			flag="true";
		fi

		
		ur=${permission:1:1};
		uw=${permission:2:1};
		ux=${permission:3:1};

		gr=${permission:4:1};
		gw=${permission:5:1};
		gx=${permission:6:1};

		or=${permission:7:1};
		ow=${permission:8:1};
		ox=${permission:9:1};

		#/etc/syslog.conf의 권한 체크
		if [[ $ux != "-" ]] || [[ $gw != "-" ]] || [[ $gx != "-" ]] || [[ $or != "-" ]] || [[ $ow != "-" ]] || [[ $ox != "-" ]]; then
			echo "[WARN!!] >> /etc/syslog.conf의 권한이 640이하가 아닙니다, 현재 권한 : '$permission'";
			flag="true"
		fi

		if [ $flag = "false" ]; then
			echo "[SAFE] >> /etc/syslog.conf은 안전합니다.";
			echo `ls -l /etc/syslog.conf`;
		fi
	else
		echo "[INFO] >> /etc/syslog.conf 없음";
	fi

	echo "";

	#/etc/rsyslog.conf의 소유자와 권한체크
	if [ -f /etc/rsyslog.conf ]; then
		echo "[INFO] >> /etc/rsyslog.conf 존재";
		fileInfo=`ls -l /etc/rsyslog.conf`;
		owner=`echo $fileInfo | awk '{print $3}'`;
		permission=`echo $fileInfo | awk '{print $1}'`;
		flag="false";

		#/etc/rsyslog.conf의 소유자 체크
		if [[ $owner != "root" ]] && [[ $owner != "bin" ]] && [[ $owner != "sys" ]]; then
			echo "[WARN!!] >> /etc/rsyslog.conf의 소유자가 root,bin,sys중 하나가 아닙니다, 현재 권한 : '$owner'";
			flag="true";
		fi

		
		ur=${permission:1:1};
		uw=${permission:2:1};
		ux=${permission:3:1};

		gr=${permission:4:1};
		gw=${permission:5:1};
		gx=${permission:6:1};

		or=${permission:7:1};
		ow=${permission:8:1};
		ox=${permission:9:1};

		#/etc/rsyslog.conf의 권한 체크
		if [[ $ux != "-" ]] || [[ $gw != "-" ]] || [[ $gx != "-" ]] || [[ $or != "-" ]] || [[ $ow != "-" ]] || [[ $ox != "-" ]]; then
			echo "[WARN!!] >> /etc/rsyslog.conf의 권한이 640이하가 아닙니다, 현재 권한 : '$permission'";
			flag="true"
		fi

		if [ $flag = "false" ]; then
			echo "[SAFE] >> /etc/rsyslog.conf은 안전합니다.";
			echo `ls -l /etc/rsyslog.conf`;
		fi
	else
		echo "[INFO] >> /etc/rsyslog.conf 없음";
	fi
}


U_12(){
	echo "===================================================";
	echo "[U-12] /etc/services 파일 소유자 및 권한 설정";

	if [ -f /etc/services ]; then
		fileInfo=`ls -l /etc/services`;
		owner=`echo $fileInfo | awk '{print $3}'`;
		permission=`echo $fileInfo | awk '{print $1}'`;
		flag="false";

		#/etc/services의 소유자 체크
		if [[ $owner != "root" ]] && [[ $owner != "bin" ]] && [[ $owner != "sys" ]]; then
			echo "[WARN!!] >> /etc/services의 소유자가 root,bin,sys중 하나가 아닙니다, 현재 권한 : '$owner'";
			flag="true";
		fi

		
		ur=${permission:1:1};
		uw=${permission:2:1};
		ux=${permission:3:1};

		gr=${permission:4:1};
		gw=${permission:5:1};
		gx=${permission:6:1};

		or=${permission:7:1};
		ow=${permission:8:1};
		ox=${permission:9:1};

		#/etc/services의 권한 체크
		if [[ $ux != "-" ]] || [[ $gw != "-" ]] || [[ $gx != "-" ]] || [[ $ow != "-" ]] || [[ $ox != "-" ]]; then
			echo "[WARN!!] >> /etc/services의 권한이 644이하가 아닙니다, 현재 권한 : '$permission'";
			flag="true"
		fi

		if [ $flag = "false" ]; then
			echo "[SAFE] >> /etc/services는 안전합니다.";
			echo `ls -l /etc/services`;
		fi
	else
		echo "[INFO] >> /etc/services 없음";
	fi
}

U_13(){
	echo "===================================================";
	echo "[U-1] SUID, SGID 설정 파일점검";
	flag="false";

	#아래 주요파일들만 SUID, SGID가 설정됐는지 확인하면 된다.
	FILE_LIST=("/sbin/dump" "/sbin/restore" "/sbin/unix_chkpwd" "/usr/bin/at" "/usr/bin/lpq" "/usr/bin/lpq-lpd" "/usr/bin/lpr" "/usr/bin/lpr-lpd" "/usr/bin/lprm" "/usr/bin/lprm-lpd" "/usr/bin/newgrp" "/usr/sbin/lpc" "/usr/sbin/lpc" "/usr/sbin/lpc-lpd" "/usr/sbin/traceroute");

	#SUID, SGID가 설정된 파일을 find한 결과목록에 주요파일이 포함되어있는지 확인
	FIND_RESULT=`sudo find / -user root -type f \( -perm -04000 -o -perm -02000 \) 2> /dev/null`;
	echo "불필요한 SUID,SGID가 설정된 파일목록";
	for file in ${FILE_LIST[@]};do
		if [ `echo $FIND_RESULT | grep $file | wc -l` -gt 0 ]; then
			echo "[WARN!!] >> $file";
			flag="true";
		fi
	done;

	if [ $flag = "false" ]; then
		echo "[SAFE] >> 주요파일에 SUID, SGID설정이 없습니다.";
	fi
}

U_14(){
	echo "===================================================";
	echo "[U-14] 사용자,시스템 시작파일 및 환경파일 소유자 및 권한 설정";
	flag="false";
	if [ -d /home ]; then
		ls /home > tmpfile_u_14_1;
		
		#모든 사용자의 홈디렉터리에 대해서
		while read -r homedir; do

			path="/home/$homedir/";	
			ls -al $path > tmpfile_u_14_2;
			while read -r line; do

				filename=`echo $line | awk '{print $9}'`;
				owner=`echo $line | awk '{print $3}'`;
				permission=`echo $line | awk '{print $1}'`;

				#홈디렉터리 내에 환경설정 파일이 있으면
				if [[ $filename = ".profile" ]] || [[ $filename = ".kshrc" ]] || [[ $filename = ".cshrc" ]] || [[ $filename = ".bashrc" ]] || [[ $filename = ".bash_profile" ]] || [[ $filename = ".login" ]] || [[ $filename = ".exrc" ]] || [[ $filename = ".netrc" ]];then 
					
					ow=${permission:8:1};

					#권한과 소유자를 체크한다.
					if [[ $ow = "w" ]] || [[ $owner != $homedir ]] && [[ $owner != 'root' ]]; then
						echo "[WARN!!] >> /home/$homedir/$filename에 OTHER WRITE권한이 있거나, 소유자가 해당 계정 또는 root가 아닙니다.";
						echo `ls -l /home/$homedir/$filename`;
						flag="true";
					fi

				fi
			done < ./tmpfile_u_14_2;
		done < ./tmpfile_u_14_1
		rm ./tmpfile_u_14_1 ./tmpfile_u_14_2;
	fi

	if [ $flag = "false" ]; then
		echo "[SAFE] >> 시스템에 있는 모든 사용자의 설정파일이 안전합니다.";
	fi
}

#U_15 -> 일단 구현했지만 기준이 모호하다.
U_15(){
	echo "===================================================";
	echo "[U-15] world writable file test";
	echo "이 항목은 담당자와 협의해야하므로 world writable이 설정된 파일목록만 출력한다.";
	if [ `sudo find / -type f -perm -2 2> /dev/null | tee tmpfile_u_15 | wc -l` -gt 0 ]; then
		echo "[WARN!!] >> world writable file exists.";
		cat ./tmpfile_u_15
		rm ./tmpfile_u_15;
	else
		echo "[INFO] >> world writable이 설정된 파일 없음.";
	fi

}

U_16(){
	echo "===================================================";
	echo "[U-16] /dev에 존재하지 않는 device 파일 점검";
	if [ `find /dev -type f 2>/dev/null | tee tmpfile_u_16 | wc -l` -gt 0 ]; then
		echo "[WARN!!] >> /dev에 의심스러운 파일이 존재합니다.";
		cat ./tmpfile_u_16;
	else
		echo "[SAFE] >> /dev의 모든 파일은 안전합니다.";
	fi
	rm ./tmpfile_u_16;
}

U_17(){
	echo "===================================================";
	echo "[U-17] \$HOME/.rhosts, hosts.equiv 사용 금지";

	echo "";
	echo "rsh, rlogin, rshell이 설치됐는지 확인.."
	if [ -f /usr/sbin/in.rshd ]; then
		echo "[INFO] >> rsh : installed!";
	else
		echo "[INFO] >> rsh : uninstalled!";
	fi

	if [ -f /usr/sbin/in.rlogind ]; then
		echo "[INFO] >> rlogin : installed!";
	else
		echo "[INFO] >> rlogin : uninstalled!";
	fi

	if [ -f /usr/sbin/in.rexecd ]; then
		echo "[INFO] >> rexec : installed!";
	else
		echo "[INFO] >> rexec : uninstalled!";
	fi

	echo "";

	
	echo "rsh,rlogin,rexec이 사용중인지 확인.."
	if [ `netstat -tuln | grep 512 | wc -l` -gt 0 ]; then 
		echo "[WARN!!] >> rexec : Active"; 
	else
		echo "[SAFE] >> rexec : Inactive"; 
	fi

	if [ `netstat -tuln | grep 513 | wc -l` -gt 0 ]; then 
		echo "[WARN!!] >> rlogin : Active"; 
	else
		echo "[SAFE] >> rlogin : Inactive"; 
	fi

	if [ `netstat -tuln | grep 514 | wc -l` -gt 0 ]; then 
		echo "[WARN!!] >> rsh : Active"; 
	else
		echo "[SAFE] >> rlogin : Inactive"; 
	fi

	echo "";

	echo "/etc/hosts.equiv가 안전한지 확인.."; 
	flag="false";
	if [ -f /etc/hosts.equiv ]; then
		line=`ls -al /etc/hosts.equiv`;
		owner=`echo $line | awk '{print $3}'`;
		permission=`echo $line | awk '{print $1}'`;
		ur=${permission:1:1};
		uw=${permission:2:1};
		ux=${permission:3:1};

		gr=${permission:4:1};
		gw=${permission:5:1};
		gx=${permission:6:1};

		or=${permission:7:1};
		ow=${permission:8:1};
		ox=${permission:9:1};

		#/etc/hosts.equiv의 소유자 체크
		if [ $owner != "root" ]; then
			echo "[WARN!!] >> /etc/hosts.equiv의 소유자가 root가 아닙니다.";
			flag="true";
		fi

		#/etc/hosts.equiv의 권한 체크
		if [[ $ux = "x" ]] || [[ $gr = "r" ]] || [[ $gw = "w" ]] || [[ $gx = "x" ]] || [[ $or = "r" ]] || [[ $ow = "w" ]] || [[ $ox = "x" ]]; then
			echo "[WARN!!] >> /etc/hosts.equiv의 권한이 600이하가 아닙니다, 현재 권한 : $permission";
			flag="true";
		fi

		#/etc/hosts.equiv에 '+'설정이 있는지 체크
		sudo cat /etc/hosts.equiv | egrep -vE '^#|^\s#' > ./tmpfile_u_17_4;
		while read -r line; do
			if [[ $line =~ '+' ]]; then
				echo "[WARN!!] >> /etc/hosts.equiv에 '+'설정이 있습니다.";
				echo $line;
				flag="true";
			fi
		done < ./tmpfile_u_17_4;
		rm ./tmpfile_u_17_4;


		if [ $flag = "false" ]; then
			echo "[SAFE] >> /etc/hosts.equiv은 안전합니다.";
		fi

	else
		echo "[INFO] >> /etc/hosts.equiv 없음.";
	fi

	echo "";

	echo "\$HOME/.rhosts이 안전한지 확인..";
	if [ -d /home ]; then
		ls /home > tmpfile_u_17_1;

		#각 사용자마다 체크
		while read -r homedir; do
			if [ -f /home/$homedir/.rhosts ]; then
				flag="false";

				echo "[INFO] >> /home/$homedir/.rhosts 존재";

				owner=`ls -l /home/$homedir/.rhosts | awk '{print $3}'`;
				permission=`ls -l /home/$homedir/.rhosts | awk '{print $1}'`;
				ur=${permission:1:1};
				uw=${permission:2:1};
				ux=${permission:3:1};

				gr=${permission:4:1};
				gw=${permission:5:1};
				gx=${permission:6:1};

				or=${permission:7:1};
				ow=${permission:8:1};
				ox=${permission:9:1};

				#해당 사용자 .rhosts의 소유자 체크
				if [[ $owner != $homedir ]] && [[ $owner != "root" ]]; then
					echo "[WARN!!] >> /home/$homedir/.rhosts의 소유자가 해당 계정 또는 root가 아닙니다. 현재 소유자 : $owner";
					flag="true";
				fi

				#해당 사용자 .rhosts의 권한 체크
				if [[ $ux = "x" ]] || [[ $gr = "r" ]] || [[ $gw = "w" ]] || [[ $gx = "x" ]] || [[ $or = "r" ]] || [[ $ow = "w" ]] || [[ $ox = "x" ]]; then
					echo "[WARN!!] >> /home/$homedir/.rhosts의 권한이 600이 아닙니다. 현재 권한 : $permission";
					flag="true";
				fi

				
				#해당 사용자 .rhosts에 '+'설정이 있는지 체크
				sudo cat /home/$homedir/.rhosts | egrep -vE '^#|^\s#'> ./tmpfile_u_17_3;
				while read -r line2; do
					if [[ $line2 =~ '+' ]]; then
						echo "[WARN!!] >> there is vulnerable setting in /home/$homedir/.rhosts! -> '$line2'";
						flag="true";
					fi
				done < ./tmpfile_u_17_3;
				rm ./tmpfile_u_17_3;

				if [ $flag = "false" ]; then
					echo "[SAFE] >> /home/$homedir/.rhosts는 안전합니다.";
				fi
				echo "";
			else
				echo "/home/$homedir/.rhosts 없음.";
			fi
		done < ./tmpfile_u_17_1
		rm ./tmpfile_u_17_1;
	fi
}


D_05(){
	echo "===================================================";
	echo "[D-05] 원격에서 DB서버로의 접속 제한 ";
	flag='false';

	if sudo mysql -u'root' -p'\n' mysql -e'select user,host from mysql.user;' > tmpfile_d_05 2> /dev/null; then
		while read -r line; do
		user=`echo $line | awk '{print $1}'`;
		host=`echo $line | awk '{print $2}'`;
		if [[ $host = '%' ]]; then
			echo "[WARN!!] >> mysql.user테이블에 user='$user' host='$host'인 행이 존재합니다, '$user'에 접근할 수 있는 IP를 제한해주세요.";	
			flag='true';
		fi
		done < ./tmpfile_d_05;
		rm ./tmpfile_d_05;
	else
		echo ">> mysql에 접근 실패";
	fi


	if sudo mysql -u'root' -p'\n' mysql -e'select user,host,db from mysql.db;' > tmpfile_d_05 2> /dev/null; then
		while read -r line; do
		user=`echo $line | awk '{print $1}'`;
		host=`echo $line | awk '{print $2}'`;
		db=`echo $line | awk '{print $3}'`;
		if [[ $host = '%' ]]; then
			echo "[WARN!!] >> mysql.db에 user='$user' host='$host' db='$db'인 행이 존재합니다. '$user'에 접근할 수 있는 IP를 제한해주세요.";	
			flag='true';

		fi
		done < ./tmpfile_d_05;
		rm ./tmpfile_d_05;


	else
		echo ">> mysql에 접근 실패";
	fi

	
	if [ $flag = 'false' ]; then
		echo "[SAFE] >> mysql.user, mysql.db에 host='%'이 설정된 행이 없습니다.";
	fi
}


D_03(){
	echo "===================================================";
	echo "[D-03] 패스워드의 사용기간 및 복잡도를 기관 정책에 맞도록 설정";
	echo "mysql에 설정된 디폴트 패스워드 사용기간, 정책을 체크한다.";

	flag="false";

	check_user_name="OFF";
	length=8;
	mixed_case_count=1;
	number_count=1;
	special_char_count=1;
	policy="MEDIUM";   #LOW,MEDIUM,STRONG
	dictionary_file="/etc/dictionary_mysql";
	default_password_lifetime=90;

	echo "";
	echo "[기준 패스워드 정책]";
	echo "패스워드에 계정이름이 포함됐는지 체크 : $check_user_name";
	echo "패스워드 길이 : $length";
	echo "대문자,소문자 쌍으로 몇개씩 포함 : $mixed_case_count";
	echo "숫자 몇개 포함 : $number_count";
	echo "특수문자 몇개 포함 : $special_char_count";
	echo "사전 파일 : $dictionary_file";
	echo "패스워드 만료 기간 : $default_password_lifetime";

	echo "정책 강도 : $policy";


	echo "";
	echo "실제 디폴트 패스워드 정책이 기준을 만족하는지 체크..";
	
	sudo mysql -u'root' -p'\n' -e 'show variables like "default_password%";' > tmpfile_d_03 2> /dev/null;
	while read -r line; do
		first_field=`echo $line | awk '{print $1}'`;
		second_field=`echo $line | awk '{print $2}'`;
		if [ $first_field = "default_password_lifetime" ]; then
			if [[ $second_field -gt $default_password_lifetime ]] || [[ $second_field -eq 0 ]]; then
				echo "[WARN!!] >> '패스워드 만료기간' 기준 : '$default_password_lifetime', but 현재 설정된 값 :  '$second_field'";
				flag="true";
			fi
		fi
	done < ./tmpfile_d_03;

	sudo mysql -u'root' -p'\n' -e 'show variables like "validate_password%";' > tmpfile_d_03 2> /dev/null;
	while read -r line; do
		first_field=`echo $line | awk '{print $1}'`;
		second_field=`echo $line | awk '{print $2}'`;

		if [ $first_field = "validate_password_check_user_name" ]; then
			if [ $second_field != $check_user_name ]; then
				echo "[WARN!!] >> '계정이름포함 체크 여부' 기준 : '$check_user_name', but 현재 설정된 값 : '$second_field'";
				flag="true";
			fi
		elif [ $first_field = "validate_password_length" ]; then	
			if [ $second_field -lt $length ]; then
				echo "[WARN!!] >> '패스워드 길이' 기준 :  '$length', but 현재 설정된 값 : '$second_field'";
				flag="true";
			fi
		elif [ $first_field = "validate_password_mixed_case_count" ]; then	
			if [ $second_field -lt $mixed_case_count ]; then
				echo "[WARN!!] >> '대/소문자 포함 개수' 기준 : '$mixed_case_count', but 현재 설정된 값 :  '$second_field'";
				flag="true";
			fi
		elif [ $first_field = "validate_password_number_count" ]; then	
			if [ $second_field -lt $number_count ]; then
				echo "[WARN!!] >> '숫자 포함 개수' 기준 : ''$number_count', bur 현재 설정된 값 : '$second_field'";
				flag="true";
			fi
		elif [ $first_field = "validate_password_policy" ]; then	
			if [ $second_field != $policy ]; then
				echo "[WARN!!] >> '정책' 기준 :  '$policy', but 현재 설정된 값 :  '$second_field'";
				flag="true";
			fi
		elif [ $first_field = "validate_password_special_char_count" ]; then	
			if [ $second_field -lt $special_char_count ]; then
				echo "[WARN!!] >> '특수문자 포함 개수' 기준 :  '$special_char_count', but 현재 설정된 값 :  '$second_field'";
				flag="true";
			fi
		elif [ $first_field = "validate_password_dictionary_file" ]; then
			if [ $second_field ]; then
				if [ $second_field != $dictionary_file ]; then
				echo "[WARN!!] >> '사전파일 경로' 기준 :  '$dictionary_file', but 현재 설정된 값 :  '$second_field'";
				flag="true";
				fi
			else
				#사전파일경로는 policy가 STRONG일 경우만 사용하므로
				#디폴트 사전파일경로가 비어있어도 일단 양호라고 하였습니다.
				echo "[INFO] >> Mysql에 사전파일경로가 비어있습니다.";
			fi
		fi
	done <./tmpfile_d_03;

	rm ./tmpfile_d_03;


	if [ $flag = "false" ]; then
		echo "[SAFE] >> Mysql의 디폴트 패스워드 정책은 기준을 만족합니다.";
	fi
}

U_54
U_05
U_06
U_07
U_08
U_09
U_10
U_11
U_12
U_13
U_14
#U_15
U_16
U_17
D_05
D_03
